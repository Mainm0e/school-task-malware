package gettarget

import (
	"fmt"
	"os"
	"path/filepath"
)

// Findpath function to find all files with specific file extensions in a directory
func Findpath(fileExtensions []string, pathData string) {
	// Specify the directory to start listing files from
	rootDir := "C:\\"

	// create directory name data if not exist
	if _, err := os.Stat("data"); os.IsNotExist(err) {
		os.Mkdir("data", 0755)
	}
	pathD := "./data/" + pathData

	// Open a file to write the paths
	outputFile, err := os.Create(pathD)
	if err != nil {
		fmt.Println("Error creating file:", err)
		return
	}
	defer outputFile.Close()

	// Traverse the directory recursively and write file paths to the output file
	err = filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return nil
		}

		// Check if the file extension matches any in the list
		if contains(fileExtensions, filepath.Ext(path)) {
			// Check if the user has permission to read the file
			if checkReadPermission(path) {
				// Check if the user has permission to write to the file
				if checkWritePermission(path) {
					// If both read and write permissions are granted, write the file path to the output file
					if !info.IsDir() {
						_, err := outputFile.WriteString(path + "\n")
						if err != nil {
							fmt.Println("Error writing to file:", err)
						}
					}
				}
			}
		}

		return nil
	})

	if err != nil {
		fmt.Println("Error traversing directory:", err)
		return
	}

	fmt.Println("File paths written to file_paths.txt")
}

// Function to check if the user has read permission for a file
func checkReadPermission(filePath string) bool {
	_, err := os.Open(filePath)
	return err == nil
}

// Function to check if the user has write permission for a file
func checkWritePermission(filePath string) bool {
	_, err := os.OpenFile(filePath, os.O_WRONLY, 0666)
	return err == nil
}

// Function to check if a string slice contains a specific string
func contains(slice []string, str string) bool {
	for _, s := range slice {
		if s == str {
			return true
		}
	}
	return false
}
